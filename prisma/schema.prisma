generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Gender {
  male
  female
  other
}

enum Role {
  student
  lecturer
  admin
}

model User {
  id                Int       @id @default(autoincrement())
  name              String
  surname           String
  gender            Gender
  email             String    @unique
  idNumber          String    @unique
  password          String
  phoneNumber       String?
  address           String?
  role              Role
  courseId          Int?      // single courseId field
  course            Course?   @relation(fields: [courseId], references: [id]) // Relationship with Course
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  resetTokens       ResetPasswordToken[]
  tests             Test[]    @relation("TestCreator") // Tests created by lecturers
  testResults       TestResult[] // Results for students

  images            Image[]      // Relation to Image model
  verificationToken String?   @unique   // New field for email verification token
  verified          Boolean   @default(false)  // New field to track email verification status
  isUserBlock       Boolean   @default(false)
}


model ResetPasswordToken {
  id         Int      @id @default(autoincrement())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int      @unique
  token      String   @unique
  expiresAt  DateTime
  createdAt  DateTime @default(now())
}

model Course {
  id         Int       @id @default(autoincrement())
  name       String
  code       String    @unique
  description String?
  modules    Module[]
  User User[]
}

model Module {
  id                Int      @id @default(autoincrement())
  code              String   @unique
  name              String
  credits           Int
  completionStatus  String   @default("upcoming")
  grade             String? 
  description       String?
  courseId          Int
  course            Course   @relation(fields: [courseId], references: [id])
  tests             Test[]  
}

model Test {
  id          Int        @id @default(autoincrement())
  title        String
  description String
  duration    Int        
  scheduledFor     DateTime
  status      String     @default("upcoming") 
  moduleId    Int
  module      Module     @relation(fields: [moduleId], references: [id])
  questions   Question[] 
  creatorId   Int
  creator     User       @relation("TestCreator", fields: [creatorId], references: [id])
  testResults TestResult[] 
  images      Image[]    // Opposite relation field for the `test` relation in `Image`
}



model Question {
  id           Int      @id @default(autoincrement())
  text         String
  type         String   @default("multiple-choice") //  multiple-choice, true-false
  options      Json     // Store options in JSON format for flexibility
  correctAnswer Int? 
  userAnswer    String?   
  points       Int      @default(1)                  
  testId       Int
  test         Test     @relation(fields: [testId], references: [id])
  TestResultQuestion TestResultQuestion[]
}

model TestResult {
  id        Int      @id @default(autoincrement())
  score     Float
  submittedAt DateTime @default(now())
  testId    Int
  test      Test     @relation(fields: [testId], references: [id])
  studentId Int
  student   User     @relation(fields: [studentId], references: [id])
  TestResultQuestion TestResultQuestion[]
}

model TestResultQuestion {
  id          Int      @id @default(autoincrement())
  testResultId Int
  questionId  Int
  isCorrect   Boolean
  studentAnswer Int? 
  testResult  TestResult @relation(fields: [testResultId], references: [id])
  question    Question @relation(fields: [questionId], references: [id])
}

model Image {
  id        Int      @id @default(autoincrement())
  testId    Int
  userId    Int   @unique   
  imageUrl  String
  publicId  String
  createdAt DateTime @default(now())

  test      Test     @relation(fields: [testId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

}
